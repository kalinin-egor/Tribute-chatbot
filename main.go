package main

import (
	"log"
	"strings"
	"sync"
	"time"

	"encoding/json"
	"net/http"
	"tribute-chatbot/internal/config"
	"tribute-chatbot/internal/logger"

	"fmt"

	"strconv"

	"github.com/joho/godotenv"
	tele "gopkg.in/telebot.v4"
)

// VerificationState —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type VerificationState struct {
	UserID     int64
	SelfieID   string
	PassportID string
	Step       string // "waiting_selfie", "waiting_passport", "completed"
}

// VerificationData —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
type VerificationData struct {
	UserID     int64
	SelfieID   string
	PassportID string
	MessageID  int
}

var (
	verificationStates = make(map[int64]*VerificationState)
	verificationMutex  sync.RWMutex
)

// getVerificationState –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getVerificationState(userID int64) *VerificationState {
	verificationMutex.RLock()
	defer verificationMutex.RUnlock()
	return verificationStates[userID]
}

// setVerificationState —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func setVerificationState(userID int64, state *VerificationState) {
	verificationMutex.Lock()
	defer verificationMutex.Unlock()
	verificationStates[userID] = state
}

// clearVerificationState –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func clearVerificationState(userID int64) {
	verificationMutex.Lock()
	defer verificationMutex.Unlock()
	delete(verificationStates, userID)
}

func main() {
	godotenv.Load()

	logg := logger.New()
	cfg, err := config.Load()
	if err != nil {
		logg.Fatal("Failed to load configuration", err)
	}

	pref := tele.Settings{
		Token:  cfg.TelegramBotToken,
		Poller: &tele.LongPoller{Timeout: 30 * time.Second},
	}
	b, err := tele.NewBot(pref)
	if err != nil {
		log.Fatalf("Failed to create bot: %v", err)
	}

	client := &http.Client{Timeout: 10 * time.Second}

	// /start
	b.Handle("/start", func(c tele.Context) error {
		markup := b.NewMarkup()
		btn := markup.URL("Get started", "https://t.me/tribute_egorbot/app")
		markup.Inline(markup.Row(btn))
		return c.Send("Welcome! Tribute helps to monetize audiences in Telegram.", markup)
	})

	// /help
	b.Handle("/help", func(c tele.Context) error {
		msg := `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/echo <—Ç–µ–∫—Å—Ç> - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç
/verificate - –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é (—Å–µ–ª—Ñ–∏ + –ø–∞—Å–ø–æ—Ä—Ç)

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!`
		return c.Send(msg)
	})

	// /echo
	b.Handle("/echo", func(c tele.Context) error {
		args := c.Message().Payload
		if args == "" {
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /echo –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
		}
		return c.Send("üîä –≠—Ö–æ: " + args)
	})

	// /verificate
	b.Handle("/verificate", func(c tele.Context) error {
		userID := c.Sender().ID

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
		state := &VerificationState{
			UserID: userID,
			Step:   "waiting_selfie",
		}
		setVerificationState(userID, state)

		return c.Send("üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!\n\nüì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–µ–ª—Ñ–∏ (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∏—Ü–∞).")
	})

	// WebAppData - –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
	b.Handle(tele.OnWebApp, func(c tele.Context) error {
		data := c.Message().WebAppData
		if data != nil && data.Data == "verify-account" {
			return c.Send("Account verification data received by bot.")
		}
		return nil
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
	b.Handle(tele.OnPhoto, func(c tele.Context) error {
		userID := c.Sender().ID
		state := getVerificationState(userID)

		if state == nil {
			return c.Send("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /verificate –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
		}

		photo := c.Message().Photo
		if photo == nil {
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		}

		fileID := photo.FileID

		switch state.Step {
		case "waiting_selfie":
			state.SelfieID = fileID
			state.Step = "waiting_passport"
			setVerificationState(userID, state)
			return c.Send("‚úÖ –°–µ–ª—Ñ–∏ –ø–æ–ª—É—á–µ–Ω–æ!\n\nüìÑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–º–∏).")

		case "waiting_passport":
			state.PassportID = fileID
			state.Step = "completed"
			setVerificationState(userID, state)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
			return sendVerificationToAdmin(b, c, state, cfg.TelegramAdminChatID)

		default:
			return c.Send("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /verificate –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
		}
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
	b.Handle(tele.OnCallback, func(c tele.Context) error {
		callback := c.Callback()
		if callback == nil {
			logg.Error("Callback is nil")
			return nil
		}

		data := callback.Data
		logg.Info(fmt.Sprintf("Received callback data: '%s' from user: %d", data, callback.Sender.ID))

		if strings.HasPrefix(data, "verify_user_") {
			logg.Info("Processing verification callback")
			return handleVerificationCallback(b, c, data, client, cfg)
		} else {
			logg.Info("Callback data does not match verify_user_ pattern")
		}

		return nil
	})

	// –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (AI-–æ—Ç–≤–µ—Ç—ã)
	b.Handle(tele.OnText, func(c tele.Context) error {
		text := strings.ToLower(strings.TrimSpace(c.Text()))
		switch {
		case strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") || strings.Contains(text, "hello"):
			return c.Send("–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞?")
		case strings.Contains(text, "–∫–∞–∫ –¥–µ–ª–∞") || strings.Contains(text, "–∫–∞–∫ —Ç—ã"):
			return c.Send("–°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üòä –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?")
		case strings.Contains(text, "—Å–ø–∞—Å–∏–±–æ") || strings.Contains(text, "thanks"):
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –ø–æ–º–æ—á—å!")
		case strings.Contains(text, "–ø–æ–∫–∞") || strings.Contains(text, "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"):
			return c.Send("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞!")
		case strings.Contains(text, "–≤—Ä–µ–º—è") || strings.Contains(text, "–¥–∞—Ç–∞"):
			return c.Send("–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! ü§ñ")
		default:
			return c.Send("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.")
		}
	})

	// my_chat_member
	b.Handle(tele.OnMyChatMember, func(c tele.Context) error {
		upd := c.ChatMember()
		oldStatus := upd.OldChatMember.Role
		newStatus := upd.NewChatMember.Role

		logg.Info(fmt.Sprintf("my_chat_member: chat_id=%d, user_id=%d, old=%s, new=%s", upd.Chat.ID, upd.NewChatMember.User.ID, oldStatus, newStatus))

		// –ï—Å–ª–∏ –±–æ—Ç —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º
		if oldStatus != "administrator" && newStatus == "administrator" {
			userID := upd.NewChatMember.User.ID
			channelTitle := upd.Chat.Title
			channelUsername := upd.Chat.Username

			payload := map[string]interface{}{
				"user_id":          userID,
				"channel_title":    channelTitle,
				"channel_username": channelUsername,
			}
			body, _ := json.Marshal(payload)
			apiURL := strings.TrimRight(cfg.APIBaseURL, "/") + "/v1/add-bot"
			req, _ := http.NewRequest("POST", apiURL, strings.NewReader(string(body)))
			req.Header.Set("Content-Type", "application/json")
			resp, err := client.Do(req)
			if err != nil {
				logg.Error("API request failed:", err)
				return nil
			}
			defer resp.Body.Close()
			if resp.StatusCode == 400 {
				b.Send(upd.Sender, "Channel is already added")
			}
			return nil
		}

		logg.Info("my_chat_member update: ", oldStatus, " -> ", newStatus)
		return nil
	})

	logg.Info("Starting Telegram bot (Telebot)...")
	b.Start()
}

// sendVerificationToAdmin –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
func sendVerificationToAdmin(bot *tele.Bot, c tele.Context, state *VerificationState, adminChatID int64) error {
	logg := logger.New()
	adminChat := &tele.Chat{ID: adminChatID}

	logg.Info(fmt.Sprintf("Sending verification to admin chat: %d", adminChatID))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
	testMsg := "üîß –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
	_, err := bot.Send(adminChat, testMsg)
	if err != nil {
		logg.Error("Bot cannot send messages to admin chat:", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
	}

	// –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
	markup := bot.NewMarkup()
	approveData := fmt.Sprintf("verify_user_%d_true", state.UserID)
	rejectData := fmt.Sprintf("verify_user_%d_false", state.UserID)

	logg.Info(fmt.Sprintf("Creating buttons with data: approve='%s', reject='%s'", approveData, rejectData))

	approveBtn := markup.Data("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", approveData)
	rejectBtn := markup.Data("‚ùå –û—Ç–æ–∑–≤–∞—Ç—å", rejectData)
	markup.Inline(markup.Row(approveBtn, rejectBtn))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–ª—Ñ–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	selfieMsg := &tele.Photo{
		File:    tele.File{FileID: state.SelfieID},
		Caption: fmt.Sprintf("üîê –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\nüì∏ –°–µ–ª—Ñ–∏", state.UserID),
	}
	_, err = bot.Send(adminChat, selfieMsg, markup)
	if err != nil {
		logg.Error("Failed to send selfie with buttons:", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	logg.Info("Successfully sent selfie with buttons")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç
	passportMsg := &tele.Photo{
		File:    tele.File{FileID: state.PassportID},
		Caption: "üìÑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞",
	}
	_, err = bot.Send(adminChat, passportMsg)
	if err != nil {
		logg.Error("Failed to send passport:", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	logg.Info("Successfully sent passport")

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	clearVerificationState(state.UserID)

	return c.Send("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.")
}

// handleVerificationCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
func handleVerificationCallback(bot *tele.Bot, c tele.Context, data string, client *http.Client, cfg *config.Config) error {
	logg := logger.New()

	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: verify_user_<user_id>_<true/false>
	parts := strings.Split(data, "_")
	if len(parts) != 4 {
		logg.Error("Invalid callback data format:", data)
		return c.Respond(&tele.CallbackResponse{Text: "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"})
	}

	userIDStr := parts[2]
	verificationStatus := parts[3]

	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		logg.Error("Failed to parse user ID:", userIDStr, err)
		return c.Respond(&tele.CallbackResponse{Text: "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"})
	}

	isVerified := verificationStatus == "true"

	logg.Info(fmt.Sprintf("Processing verification callback: user_id=%d, verified=%t", userID, isVerified))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
	payload := map[string]interface{}{
		"userId":        userID,
		"isVerificated": isVerified,
	}

	body, _ := json.Marshal(payload)
	apiURL := strings.TrimRight(cfg.APIBaseURL, "/") + "/v1/check-verified-passport"
	req, _ := http.NewRequest("POST", apiURL, strings.NewReader(string(body)))
	req.Header.Set("Content-Type", "application/json")

	logg.Info("Sending API request to:", apiURL)

	resp, err := client.Do(req)
	if err != nil {
		logg.Error("API request failed:", err)
		return c.Respond(&tele.CallbackResponse{Text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"})
	}
	defer resp.Body.Close()

	logg.Info("API response status:", resp.StatusCode)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != 200 {
		logg.Error("API returned non-200 status:", resp.StatusCode)
		return c.Respond(&tele.CallbackResponse{Text: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"})
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
	callback := c.Callback()
	if callback != nil && callback.Message != nil {
		// –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
		err = bot.Delete(callback.Message)
		if err != nil {
			logg.Error("Failed to delete message with buttons:", err)
		} else {
			logg.Info("Successfully deleted message with buttons")
		}

		// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º)
		if callback.Message.ID > 1 {
			prevMsg := &tele.Message{
				ID:   callback.Message.ID - 1,
				Chat: callback.Message.Chat,
			}
			err = bot.Delete(prevMsg)
			if err != nil {
				logg.Error("Failed to delete passport message:", err)
			} else {
				logg.Info("Successfully deleted passport message")
			}
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	userChat := &tele.Chat{ID: userID}
	statusText := "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
	if !isVerified {
		statusText = "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
	}

	_, err = bot.Send(userChat, statusText)
	if err != nil {
		logg.Error("Failed to send notification to user:", err)
	}

	logg.Info(fmt.Sprintf("Verification processed successfully: user_id=%d, verified=%t", userID, isVerified))

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	return c.Respond(&tele.CallbackResponse{Text: "‚úÖ –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω"})
}
