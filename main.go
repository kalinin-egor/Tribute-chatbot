package main

import (
	"log"
	"strings"
	"time"

	"encoding/json"
	"net/http"
	"tribute-chatbot/internal/config"
	"tribute-chatbot/internal/logger"

	"fmt"

	"github.com/joho/godotenv"
	tele "gopkg.in/telebot.v4"
)

func main() {
	godotenv.Load()

	logg := logger.New()
	cfg, err := config.Load()
	if err != nil {
		logg.Fatal("Failed to load configuration", err)
	}

	pref := tele.Settings{
		Token:  cfg.TelegramBotToken,
		Poller: &tele.LongPoller{Timeout: 30 * time.Second},
	}
	b, err := tele.NewBot(pref)
	if err != nil {
		log.Fatalf("Failed to create bot: %v", err)
	}

	client := &http.Client{Timeout: 10 * time.Second}

	// /start
	b.Handle("/start", func(c tele.Context) error {
		markup := b.NewMarkup()
		btn := markup.WebApp("Get started", &tele.WebApp{URL: "https://t.me/tribute_egorbot/app"})
		markup.Inline(markup.Row(btn))
		return c.Send("Welcome! Tribute helps to monetize audiences in Telegram.", markup)
	})

	// /help
	b.Handle("/help", func(c tele.Context) error {
		msg := `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/echo <—Ç–µ–∫—Å—Ç> - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!`
		return c.Send(msg)
	})

	// /echo
	b.Handle("/echo", func(c tele.Context) error {
		args := c.Message().Payload
		if args == "" {
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /echo –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
		}
		return c.Send("üîä –≠—Ö–æ: " + args)
	})

	// WebAppData - –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
	b.Handle(tele.OnWebApp, func(c tele.Context) error {
		data := c.Message().WebAppData
		if data != nil && data.Data == "verify-account" {
			return c.Send("Account verification data received by bot.")
		}
		return nil
	})

	// –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (AI-–æ—Ç–≤–µ—Ç—ã)
	b.Handle(tele.OnText, func(c tele.Context) error {
		text := strings.ToLower(strings.TrimSpace(c.Text()))
		switch {
		case strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") || strings.Contains(text, "hello"):
			return c.Send("–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞?")
		case strings.Contains(text, "–∫–∞–∫ –¥–µ–ª–∞") || strings.Contains(text, "–∫–∞–∫ —Ç—ã"):
			return c.Send("–°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üòä –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?")
		case strings.Contains(text, "—Å–ø–∞—Å–∏–±–æ") || strings.Contains(text, "thanks"):
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –ø–æ–º–æ—á—å!")
		case strings.Contains(text, "–ø–æ–∫–∞") || strings.Contains(text, "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"):
			return c.Send("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞!")
		case strings.Contains(text, "–≤—Ä–µ–º—è") || strings.Contains(text, "–¥–∞—Ç–∞"):
			return c.Send("–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! ü§ñ")
		default:
			return c.Send("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.")
		}
	})

	// my_chat_member
	b.Handle(tele.OnMyChatMember, func(c tele.Context) error {
		upd := c.ChatMember()
		oldStatus := upd.OldChatMember.Role
		newStatus := upd.NewChatMember.Role

		logg.Info(fmt.Sprintf("my_chat_member: chat_id=%d, user_id=%d, old=%s, new=%s", upd.Chat.ID, upd.NewChatMember.User.ID, oldStatus, newStatus))

		// –ï—Å–ª–∏ –±–æ—Ç —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º
		if oldStatus != "administrator" && newStatus == "administrator" {
			userID := upd.NewChatMember.User.ID
			channelTitle := upd.Chat.Title
			channelUsername := upd.Chat.Username

			payload := map[string]interface{}{
				"user_id":          userID,
				"channel_title":    channelTitle,
				"channel_username": channelUsername,
			}
			body, _ := json.Marshal(payload)
			apiURL := strings.TrimRight(cfg.APIBaseURL, "/") + "/v1/add-bot"
			req, _ := http.NewRequest("POST", apiURL, strings.NewReader(string(body)))
			req.Header.Set("Content-Type", "application/json")
			resp, err := client.Do(req)
			if err != nil {
				logg.Error("API request failed:", err)
				return nil
			}
			defer resp.Body.Close()
			if resp.StatusCode == 400 {
				b.Send(upd.Sender, "Channel is already added")
			}
			return nil
		}

		logg.Info("my_chat_member update: ", oldStatus, " -> ", newStatus)
		return nil
	})

	logg.Info("Starting Telegram bot (Telebot)...")
	b.Start()
}
