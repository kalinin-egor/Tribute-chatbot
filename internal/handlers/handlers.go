package handlers

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
	"time"

	"tribute-chatbot/internal/config"
	"tribute-chatbot/internal/logger"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// MessageContext —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
type MessageContext struct {
	Bot     *tgbotapi.BotAPI
	Message *tgbotapi.Message
	Logger  logger.Logger
}

// ChatMemberContext —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
type ChatMemberContext struct {
	Bot    *tgbotapi.BotAPI
	Update *tgbotapi.ChatMemberUpdated
	Logger logger.Logger
}

// Handlers —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
type Handlers struct {
	logger logger.Logger
	config *config.Config
	client *http.Client
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
func New(cfg *config.Config, log logger.Logger) *Handlers {
	return &Handlers{
		logger: log,
		config: cfg,
		client: &http.Client{Timeout: 10 * time.Second},
	}
}

// HandleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (h *Handlers) HandleCommand(ctx *MessageContext) error {
	command := ctx.Message.Command()
	args := ctx.Message.CommandArguments()

	h.logger.Debug("Handling command:", command, "with args:", args)

	switch command {
	case "start":
		return h.handleStart(ctx)
	case "help":
		return h.handleHelp(ctx)
	case "echo":
		return h.handleEcho(ctx, args)
	default:
		return h.handleUnknownCommand(ctx)
	}
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (h *Handlers) HandleMessage(ctx *MessageContext) error {
	text := ctx.Message.Text
	h.logger.Debug("Handling message:", text)

	// –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	response := h.processMessage(text)
	return h.sendResponse(ctx, response)
}

// HandleMyChatMember –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
func (h *Handlers) HandleMyChatMember(ctx *ChatMemberContext) error {
	chat := ctx.Update.Chat
	oldStatus := ctx.Update.OldChatMember.Status
	newStatus := ctx.Update.NewChatMember.Status

	log := h.logger.WithField("chat_id", chat.ID).WithField("chat_title", chat.Title)

	log.Info("Bot status changed from '", oldStatus, "' to '", newStatus, "' in chat")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	wasAddedAsAdmin := (oldStatus == "left" || oldStatus == "kicked") && newStatus == "administrator"
	wasPromoted := oldStatus == "member" && newStatus == "administrator"

	if wasAddedAsAdmin || wasPromoted {
		log.Info("Bot is now an administrator. Notifying API...")
		if err := h.notifyAPI(ctx); err != nil {
			log.Error("Failed to notify API:", err)
			// –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏–∑-–∑–∞ API
		}
	} else if (oldStatus == "left" || oldStatus == "kicked") && newStatus == "member" {
		log.Info("Bot was added as a member.")
	} else if newStatus == "left" || newStatus == "kicked" {
		log.Warn("Bot was removed from the chat.")
	} else if oldStatus == "administrator" && newStatus == "member" {
		log.Warn("Bot was demoted from administrator.")
	}

	return nil
}

// notifyAPI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π API
func (h *Handlers) notifyAPI(ctx *ChatMemberContext) error {
	log := h.logger.WithField("chat_id", ctx.Update.Chat.ID)

	channelUsername := ""
	if ctx.Update.Chat.UserName != "" {
		channelUsername = "@" + ctx.Update.Chat.UserName
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º payload
	payload := struct {
		UserID          int64  `json:"user_id"`
		ChannelTitle    string `json:"channel_title"`
		ChannelUsername string `json:"channel_username"`
	}{
		UserID:          ctx.Update.From.ID,
		ChannelTitle:    ctx.Update.Chat.Title,
		ChannelUsername: channelUsername,
	}

	body, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("failed to marshal payload: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL
	url := fmt.Sprintf("%s/v1/add-bot", h.config.APIBaseURL)
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(body))
	if err != nil {
		return fmt.Errorf("failed to create api request: %w", err)
	}
	req.Header.Set("Content-Type", "application/json")

	log.Info("Sending notification to API: ", url)

	resp, err := h.client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send api request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 300 {
		return fmt.Errorf("api returned status %s", resp.Status)
	}

	log.Info("Successfully notified API. Status: ", resp.Status)

	return nil
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *Handlers) handleStart(ctx *MessageContext) error {
	message := "Welcome! Tribute helps to monetize audiences in Telegram."

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
	msg := tgbotapi.NewMessage(ctx.Message.Chat.ID, message)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å URL –∫–Ω–æ–ø–∫–æ–π
	url := "https://t.me/tribute_egorbot/app"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("Get started", url),
		),
	)
	msg.ReplyMarkup = keyboard

	_, err := ctx.Bot.Send(msg)
	if err != nil {
		h.logger.Error("Failed to send start message with inline button:", err)
		return fmt.Errorf("failed to send start message with inline button: %w", err)
	}

	return nil
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (h *Handlers) handleHelp(ctx *MessageContext) error {
	message := `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/echo <—Ç–µ–∫—Å—Ç> - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!`

	return h.sendResponse(ctx, message)
}

// handleEcho –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /echo
func (h *Handlers) handleEcho(ctx *MessageContext, args string) error {
	if args == "" {
		return h.sendResponse(ctx, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /echo –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
	}

	return h.sendResponse(ctx, fmt.Sprintf("üîä –≠—Ö–æ: %s", args))
}

// handleUnknownCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (h *Handlers) handleUnknownCommand(ctx *MessageContext) error {
	message := fmt.Sprintf(
		"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /%s\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
		ctx.Message.Command(),
	)

	return h.sendResponse(ctx, message)
}

// processMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (h *Handlers) processMessage(text string) string {
	text = strings.ToLower(strings.TrimSpace(text))

	switch {
	case strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") || strings.Contains(text, "hello"):
		return "–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞?"
	case strings.Contains(text, "–∫–∞–∫ –¥–µ–ª–∞") || strings.Contains(text, "–∫–∞–∫ —Ç—ã"):
		return "–°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üòä –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?"
	case strings.Contains(text, "—Å–ø–∞—Å–∏–±–æ") || strings.Contains(text, "thanks"):
		return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –ø–æ–º–æ—á—å!"
	case strings.Contains(text, "–ø–æ–∫–∞") || strings.Contains(text, "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"):
		return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞!"
	case strings.Contains(text, "–≤—Ä–µ–º—è") || strings.Contains(text, "–¥–∞—Ç–∞"):
		return "–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! ü§ñ"
	default:
		return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥."
	}
}

// sendResponse –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (h *Handlers) sendResponse(ctx *MessageContext, text string) error {
	msg := tgbotapi.NewMessage(ctx.Message.Chat.ID, text)
	msg.ParseMode = "HTML"

	_, err := ctx.Bot.Send(msg)
	if err != nil {
		h.logger.Error("Failed to send message:", err)
		return fmt.Errorf("failed to send message: %w", err)
	}

	return nil
}
