package common

import (
	"strings"
	"tribute-chatbot/internal/logger"

	tele "gopkg.in/telebot.v4"
)

// Handler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥
type Handler struct {
	logger logger.Logger
}

// NewHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥
func NewHandler() *Handler {
	return &Handler{
		logger: logger.New(),
	}
}

// HandleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *Handler) HandleStart(c tele.Context) error {
	markup := &tele.ReplyMarkup{}
	btn := markup.URL("Get started", "https://t.me/tribute_egorbot/app")
	markup.Inline(markup.Row(btn))
	return c.Send("Welcome! Tribute helps to monetize audiences in Telegram.", markup)
}

// HandleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (h *Handler) HandleHelp(c tele.Context) error {
	msg := `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/echo <—Ç–µ–∫—Å—Ç> - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç
/verificate - –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é (—Å–µ–ª—Ñ–∏ + –ø–∞—Å–ø–æ—Ä—Ç)

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!`
	return c.Send(msg)
}

// HandleEcho –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /echo
func (h *Handler) HandleEcho(c tele.Context) error {
	args := c.Message().Payload
	if args == "" {
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /echo –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
	}
	return c.Send("üîä –≠—Ö–æ: " + args)
}

// HandleText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (h *Handler) HandleText(c tele.Context) error {
	text := strings.ToLower(strings.TrimSpace(c.Text()))
	switch {
	case strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") || strings.Contains(text, "hello"):
		return c.Send("–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞?")
	case strings.Contains(text, "–∫–∞–∫ –¥–µ–ª–∞") || strings.Contains(text, "–∫–∞–∫ —Ç—ã"):
		return c.Send("–°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üòä –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?")
	case strings.Contains(text, "—Å–ø–∞—Å–∏–±–æ") || strings.Contains(text, "thanks"):
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –ø–æ–º–æ—á—å!")
	case strings.Contains(text, "–ø–æ–∫–∞") || strings.Contains(text, "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"):
		return c.Send("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞!")
	case strings.Contains(text, "–≤—Ä–µ–º—è") || strings.Contains(text, "–¥–∞—Ç–∞"):
		return c.Send("–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! ü§ñ")
	default:
		return c.Send("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

// HandleWebApp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WebApp –¥–∞–Ω–Ω—ã–µ
func (h *Handler) HandleWebApp(c tele.Context) error {
	data := c.Message().WebAppData
	if data != nil && data.Data == "verify-account" {
		return c.Send("Account verification data received by bot.")
	}
	return nil
}

// HandleDonate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /donate
func (h *Handler) HandleDonate(c tele.Context) error {
	photo := &tele.Photo{
		File:    tele.FromDisk("assets/support.jpg"),
		Caption: "<b>Support the Creativity üåü</b>\nSubscribe to keep our creativity alive! With your help, we can continue creating amazing content just for you. Thank you for being awesome!",
	}
	return c.Send(photo, &tele.SendOptions{ParseMode: tele.ModeHTML})
}
