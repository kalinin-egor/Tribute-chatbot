package verification

import (
	"fmt"
	"strconv"
	"strings"
	"tribute-chatbot/internal/config"
	"tribute-chatbot/internal/logger"
	"tribute-chatbot/internal/models"
	"tribute-chatbot/internal/services"

	tele "gopkg.in/telebot.v4"
)

// Handler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
type Handler struct {
	verificationService *services.VerificationService
	apiService          *services.APIService
	config              *config.Config
	logger              logger.Logger
}

// NewHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
func NewHandler(
	verificationService *services.VerificationService,
	apiService *services.APIService,
	config *config.Config,
) *Handler {
	return &Handler{
		verificationService: verificationService,
		apiService:          apiService,
		config:              config,
		logger:              logger.New(),
	}
}

// HandleStartVerification –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /verificate
func (h *Handler) HandleStartVerification(c tele.Context) error {
	userID := c.Sender().ID

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
	h.verificationService.InitializeState(userID)

	return c.Send("üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!\n\nüì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–µ–ª—Ñ–∏ (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∏—Ü–∞).")
}

// HandlePhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (h *Handler) HandlePhoto(c tele.Context) error {
	userID := c.Sender().ID
	state := h.verificationService.GetState(userID)

	if state == nil {
		return c.Send("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /verificate –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
	}

	photo := c.Message().Photo
	if photo == nil {
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
	}

	fileID := photo.FileID

	switch state.Step {
	case models.VerificationStepWaitingSelfie:
		h.verificationService.UpdateSelfie(userID, fileID)
		return c.Send("‚úÖ –°–µ–ª—Ñ–∏ –ø–æ–ª—É—á–µ–Ω–æ!\n\nüìÑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–º–∏).")

	case models.VerificationStepWaitingPassport:
		h.verificationService.UpdatePassport(userID, fileID)
		return h.sendVerificationToAdmin(c, state)

	default:
		return c.Send("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /verificate –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
	}
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (h *Handler) HandleCallback(c tele.Context) error {
	callback := c.Callback()
	if callback == nil {
		h.logger.Error("Callback is nil")
		return nil
	}

	data := strings.TrimSpace(callback.Data)
	h.logger.Info(fmt.Sprintf("Received callback data: '%s' from user: %d", data, callback.Sender.ID))

	if strings.HasPrefix(data, "verify_user_") {
		h.logger.Info("Processing verification callback")
		return h.handleVerificationCallback(c, data)
	} else {
		h.logger.Info("Callback data does not match verify_user_ pattern")
	}

	return nil
}

// sendVerificationToAdmin –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
func (h *Handler) sendVerificationToAdmin(c tele.Context, state *models.VerificationState) error {
	adminChat := &tele.Chat{ID: h.config.TelegramAdminChatID}

	h.logger.Info(fmt.Sprintf("Sending verification to admin chat: %d", h.config.TelegramAdminChatID))

	// –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
	markup := &tele.ReplyMarkup{}
	approveData := fmt.Sprintf("verify_user_%d_true", state.UserID)
	rejectData := fmt.Sprintf("verify_user_%d_false", state.UserID)

	h.logger.Info(fmt.Sprintf("Creating buttons with data: approve='%s', reject='%s'", approveData, rejectData))

	approveBtn := markup.Data("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", approveData)
	rejectBtn := markup.Data("‚ùå –û—Ç–æ–∑–≤–∞—Ç—å", rejectData)
	markup.Inline(markup.Row(approveBtn, rejectBtn))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–ª—Ñ–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	selfieMsg := &tele.Photo{
		File:    tele.File{FileID: state.SelfieID},
		Caption: fmt.Sprintf("üîê –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d\nüì∏ –°–µ–ª—Ñ–∏", state.UserID),
	}
	selfieSentMsg, err := c.Bot().Send(adminChat, selfieMsg, markup)
	if err != nil {
		h.logger.Error("Failed to send selfie with buttons:", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	h.logger.Info(fmt.Sprintf("Successfully sent selfie with buttons. Message ID: %d", selfieSentMsg.ID))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç
	passportMsg := &tele.Photo{
		File:    tele.File{FileID: state.PassportID},
		Caption: "üìÑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞",
	}
	passportSentMsg, err := c.Bot().Send(adminChat, passportMsg)
	if err != nil {
		h.logger.Error("Failed to send passport:", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	h.logger.Info(fmt.Sprintf("Successfully sent passport. Message ID: %d", passportSentMsg.ID))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
	h.verificationService.UpdateMessageIDs(state.UserID, selfieSentMsg.ID, passportSentMsg.ID)

	return c.Send("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.")
}

// handleVerificationCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (h *Handler) handleVerificationCallback(c tele.Context, data string) error {
	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: verify_user_<user_id>_<true/false>
	parts := strings.Split(data, "_")
	if len(parts) != 4 {
		h.logger.Error("Invalid callback data format:", data)
		return c.Respond(&tele.CallbackResponse{Text: "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"})
	}

	userIDStr := parts[2]
	verificationStatus := parts[3]

	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		h.logger.Error("Failed to parse user ID:", userIDStr, err)
		return c.Respond(&tele.CallbackResponse{Text: "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"})
	}

	isVerified := verificationStatus == "true"

	h.logger.Info(fmt.Sprintf("Processing verification callback: user_id=%d, verified=%t", userID, isVerified))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
	err = h.apiService.UpdateUserVerification(userID, isVerified)
	if err != nil {
		h.logger.Error("Failed to update user verification:", err)
		return c.Respond(&tele.CallbackResponse{Text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"})
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
	callback := c.Callback()
	if callback != nil && callback.Message != nil {
		h.logger.Info(fmt.Sprintf("Attempting to delete messages. Current message ID: %d", callback.Message.ID))

		// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π
		state := h.verificationService.GetState(userID)
		if state != nil && state.SelfieMessageID > 0 && state.PassportMessageID > 0 {
			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ–ª—Ñ–∏ (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
			selfieMsg := &tele.Message{
				ID:   state.SelfieMessageID,
				Chat: callback.Message.Chat,
			}
			err = c.Bot().Delete(selfieMsg)
			if err != nil {
				h.logger.Error("Failed to delete selfie message:", err)
			} else {
				h.logger.Info(fmt.Sprintf("Successfully deleted selfie message ID: %d", state.SelfieMessageID))
			}

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º
			passportMsg := &tele.Message{
				ID:   state.PassportMessageID,
				Chat: callback.Message.Chat,
			}
			err = c.Bot().Delete(passportMsg)
			if err != nil {
				h.logger.Error("Failed to delete passport message:", err)
			} else {
				h.logger.Info(fmt.Sprintf("Successfully deleted passport message ID: %d", state.PassportMessageID))
			}

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			h.verificationService.ClearState(userID)
		} else {
			// Fallback: —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
			err = c.Bot().Delete(callback.Message)
			if err != nil {
				h.logger.Error("Failed to delete message with buttons:", err)
			} else {
				h.logger.Info("Successfully deleted message with buttons")
			}

			if callback.Message.ID > 1 {
				prevMsg := &tele.Message{
					ID:   callback.Message.ID - 1,
					Chat: callback.Message.Chat,
				}
				err = c.Bot().Delete(prevMsg)
				if err != nil {
					h.logger.Error("Failed to delete passport message:", err)
				} else {
					h.logger.Info("Successfully deleted passport message")
				}
			}
		}
	} else {
		h.logger.Error("Callback or callback.Message is nil, cannot delete messages")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	userChat := &tele.Chat{ID: userID}
	statusText := "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
	if !isVerified {
		statusText = "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
	}

	_, err = c.Bot().Send(userChat, statusText)
	if err != nil {
		h.logger.Error("Failed to send notification to user:", err)
	}

	h.logger.Info(fmt.Sprintf("Verification processed successfully: user_id=%d, verified=%t", userID, isVerified))

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	return c.Respond(&tele.CallbackResponse{Text: "‚úÖ –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω"})
}
